{
  "swagger" : "2.0",
  "info" : {
    "version" : "0.3",
    "title" : "Nuve API"
  },
  "host" : "api.nuve.us",
  "basePath" : "/v",
  "tags" : [ {
    "name" : "authorizations"
  }, {
    "name" : "policies"
  }, {
    "name" : "analyses"
  }, {
    "name" : "orgs"
  }, {
    "name" : "assets"
  }, {
    "name" : "events"
  }, {
    "name" : "users"
  }, {
    "name" : "activations"
  }, {
    "name" : "geozones"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/activations" : {
      "get" : {
        "tags" : [ "activations" ],
        "summary" : "Retrieve all activations the authenticated user can access",
        "description" : "",
        "operationId" : "getActivations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Activations"
            }
          }
        }
      }
    },
    "/activations/{id}" : {
      "get" : {
        "tags" : [ "activations" ],
        "summary" : "Retrieve an activation given its identifier",
        "description" : "",
        "operationId" : "getActivation",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Activations"
            }
          },
          "404" : {
            "description" : "Activation not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/activations/{id}/analyses" : {
      "get" : {
        "tags" : [ "activations" ],
        "summary" : "Retrieve an activation's analyses given its identifier",
        "description" : "",
        "operationId" : "getActivationAnalyses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Analyses"
            }
          },
          "404" : {
            "description" : "Activation not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/activations/{id}/event" : {
      "get" : {
        "tags" : [ "activations" ],
        "summary" : "Retrieve an activation's events given its identifier",
        "description" : "",
        "operationId" : "getActivationEvent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LocationEvents"
            }
          },
          "404" : {
            "description" : "Activation not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/analyses" : {
      "get" : {
        "tags" : [ "analyses" ],
        "summary" : "Retrieve all analyses the authenticated user can access",
        "description" : "",
        "operationId" : "getAnalyses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Analyses"
            }
          }
        }
      }
    },
    "/analyses/{id}" : {
      "get" : {
        "tags" : [ "analyses" ],
        "summary" : "Retrieve an analysis by its identifier",
        "description" : "",
        "operationId" : "getAnalysis",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the analysis",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Analyses"
            }
          },
          "404" : {
            "description" : "Analysis not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/analyses/{id}/activations" : {
      "get" : {
        "tags" : [ "analyses" ],
        "summary" : "Retrieve an analysis' activation given the identifier of the analysis",
        "description" : "",
        "operationId" : "getAnalysisActivations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the analysis",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Activations"
            }
          },
          "404" : {
            "description" : "Analysis not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/analyses/{id}/asset" : {
      "get" : {
        "tags" : [ "analyses" ],
        "summary" : "Retrieve an analysis' asset by the identifier of the analysis",
        "description" : "",
        "operationId" : "getAnalysisAsset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the analysis",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Assets"
            }
          },
          "404" : {
            "description" : "Analysis not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/assets" : {
      "get" : {
        "tags" : [ "assets" ],
        "summary" : "Retrieve all assets the authenticated user can access",
        "description" : "",
        "operationId" : "getAssets",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Assets"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "assets" ],
        "summary" : "Create an asset",
        "description" : "",
        "operationId" : "createAsset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Created asset",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AssetContainer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AssetContainer"
            }
          }
        }
      }
    },
    "/assets/{id}" : {
      "get" : {
        "tags" : [ "assets" ],
        "summary" : "Retrieve an asset by its identifier",
        "description" : "",
        "operationId" : "getAsset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the asset",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Assets"
            }
          },
          "404" : {
            "description" : "Asset not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/assets/{id}/authorizations" : {
      "get" : {
        "tags" : [ "assets" ],
        "summary" : "Retrieve the authorizations for an asset by the asset's identifier",
        "description" : "",
        "operationId" : "getAssetAuthorizations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the asset",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Authorizations"
            }
          },
          "404" : {
            "description" : "Asset not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "assets" ],
        "summary" : "Create an authorization for an asset",
        "description" : "",
        "operationId" : "createAuthorization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the asset",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "404" : {
            "description" : "Asset not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          },
          "422" : {
            "description" : "Authorization is invalid and could not be created",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/assets/{id}/org" : {
      "get" : {
        "tags" : [ "assets" ],
        "summary" : "Retrieve the organization for an asset by the asset's identifier",
        "description" : "",
        "operationId" : "getAssetOrg",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the asset",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Orgs"
            }
          },
          "404" : {
            "description" : "Asset not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/authorizations" : {
      "get" : {
        "tags" : [ "authorizations" ],
        "summary" : "Retrieve all authorizations",
        "description" : "",
        "operationId" : "getAuthorizations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Authorizations"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "authorizations" ],
        "summary" : "Create authorizations",
        "description" : "",
        "operationId" : "createAuthorizations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "422" : {
            "description" : "One or more authorizations is invalid and could not be created",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/authorizations/{id}" : {
      "get" : {
        "tags" : [ "authorizations" ],
        "summary" : "Retrieve an authorization by its identifier",
        "description" : "",
        "operationId" : "getAuthorization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Authorizations"
            }
          },
          "404" : {
            "description" : "Authorization not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "authorizations" ],
        "summary" : "Delete an authorization by its identifier",
        "description" : "",
        "operationId" : "deleteAuthorization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "404" : {
            "description" : "Authorization not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/authorizations/{id}/asset" : {
      "get" : {
        "tags" : [ "authorizations" ],
        "summary" : "Retrieve the asset related to an authorization",
        "description" : "",
        "operationId" : "getAuthorizationAsset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Assets"
            }
          },
          "404" : {
            "description" : "Authorization not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/authorizations/{id}/policy" : {
      "get" : {
        "tags" : [ "authorizations" ],
        "summary" : "Retrieve the policy which created an authorization by the authorization's identifier",
        "description" : "",
        "operationId" : "getAuthorizationPolicy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the authorization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Policies"
            }
          },
          "404" : {
            "description" : "Authorization not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/events" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Retrieve all location events the authenticated user can access",
        "description" : "",
        "operationId" : "getEvents",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter[asset]",
          "in" : "query",
          "description" : "IDs of assets which will be represented in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "filter[generated]",
          "in" : "query",
          "description" : "ISO-8601 based interval for the time period, based upon the generated date and time of the event, over which to retrieve events",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter[created]",
          "in" : "query",
          "description" : "ISO-8601 based interval for the time period, based upon the creation date and time, over which to retrieve events",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LocationEvents"
            }
          },
          "400" : {
            "description" : "Interval invalid",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Create a location event or events",
        "description" : "",
        "operationId" : "createEvent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Created events",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LocationEvents"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LocationEvents"
            }
          },
          "422" : {
            "description" : "Invalid events",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/events/{id}" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Retrieve a location event by its identifier",
        "description" : "",
        "operationId" : "getEvent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LocationEvents"
            }
          },
          "404" : {
            "description" : "Event not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/events/{id}/asset" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Retrieve the asset for an event",
        "description" : "",
        "operationId" : "getEventAsset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the event to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Assets"
            }
          },
          "404" : {
            "description" : "Event not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/geozones" : {
      "get" : {
        "tags" : [ "geozones" ],
        "summary" : "Retrieve all geozones",
        "description" : "",
        "operationId" : "getGeozones",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Geozones"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "geozones" ],
        "summary" : "Create geozones",
        "description" : "",
        "operationId" : "createGeozones",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Newly created geozones",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Geozones"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Geozones"
            }
          },
          "422" : {
            "description" : "One or more geozones is invalid and could not be created",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/geozones/{id}" : {
      "get" : {
        "tags" : [ "geozones" ],
        "summary" : "Retrieve a geozone by its identifier",
        "description" : "",
        "operationId" : "getGeozone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the geozone",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Geozones"
            }
          },
          "404" : {
            "description" : "Geozone not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "geozones" ],
        "summary" : "Update a geozone by its identifier",
        "description" : "",
        "operationId" : "updateGeozone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the geozone",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Geozones"
            }
          },
          "404" : {
            "description" : "Geozone not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "geozones" ],
        "summary" : "Delete a geozone by its identifier",
        "description" : "",
        "operationId" : "deleteGeozone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the geozone",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "404" : {
            "description" : "Geozone not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/geozones/{id}/org" : {
      "get" : {
        "tags" : [ "geozones" ],
        "summary" : "Retrieve the organization for a geozone by the geozone's identifier",
        "description" : "",
        "operationId" : "getGeozoneOrg",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the geozone",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Orgs"
            }
          },
          "404" : {
            "description" : "Geozone not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/geozones/{id}/policies" : {
      "get" : {
        "tags" : [ "geozones" ],
        "summary" : "Retrieve the policies for a geozone by the geozone's identifier",
        "description" : "",
        "operationId" : "getGeozonePolicies",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the geozone",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Policies"
            }
          },
          "404" : {
            "description" : "Geozone not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/orgs" : {
      "get" : {
        "tags" : [ "orgs" ],
        "summary" : "Retrieve all organizations the authenticated user can access",
        "description" : "",
        "operationId" : "getOrgs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Orgs"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "orgs" ],
        "summary" : "Create new organizations",
        "description" : "",
        "operationId" : "createOrgs",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The org or orgs which will be created",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Orgs"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Orgs"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          },
          "422" : {
            "description" : "Invalid organizations",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/orgs/{id}" : {
      "get" : {
        "tags" : [ "orgs" ],
        "summary" : "Retrieve an organization by its identifier",
        "description" : "",
        "operationId" : "getOrg",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the organization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrgContainer"
            }
          },
          "404" : {
            "description" : "Org not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "orgs" ],
        "summary" : "Update an existing organizations",
        "description" : "",
        "operationId" : "updateOrg",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrgContainer"
            }
          },
          "422" : {
            "description" : "Invalid organizations",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/orgs/{id}/assets" : {
      "get" : {
        "tags" : [ "orgs" ],
        "summary" : "Retrieve an organization's assets by the org identifier",
        "description" : "",
        "operationId" : "getOrgAssets",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the organization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Assets"
            }
          },
          "404" : {
            "description" : "Org not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/orgs/{id}/children" : {
      "get" : {
        "tags" : [ "orgs" ],
        "summary" : "Retrieve an organization's children by its identifier",
        "description" : "",
        "operationId" : "getOrgChildren",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the organization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Orgs"
            }
          },
          "404" : {
            "description" : "Org not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/orgs/{id}/geozones" : {
      "get" : {
        "tags" : [ "orgs" ],
        "summary" : "Retrieve an organization's geozones by the org identifier",
        "description" : "",
        "operationId" : "getOrgGeozones",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the organization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Geozones"
            }
          },
          "404" : {
            "description" : "Org not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/orgs/{id}/parent" : {
      "get" : {
        "tags" : [ "orgs" ],
        "summary" : "Retrieve an organization's parent by its identifier",
        "description" : "",
        "operationId" : "getOrgParent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the organization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Orgs"
            }
          },
          "404" : {
            "description" : "Org not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/orgs/{id}/users" : {
      "get" : {
        "tags" : [ "orgs" ],
        "summary" : "Retrieve an organization's users by the org identifier",
        "description" : "",
        "operationId" : "getOrgUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the organization",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Users"
            }
          },
          "404" : {
            "description" : "Org not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/policies" : {
      "get" : {
        "tags" : [ "policies" ],
        "summary" : "Retrieve all policies",
        "description" : "",
        "operationId" : "getPolicies",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter[geozone]",
          "in" : "query",
          "description" : "Identifiers of geozones which will have their policies represented in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "filter[permission]",
          "in" : "query",
          "description" : "Permission types which will be represented in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "cargo", "fuel" ]
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Policies"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "policies" ],
        "summary" : "Create a policy or policies for a geozone",
        "description" : "",
        "operationId" : "createPolicies",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Newly created policies",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Policies"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Policies"
            }
          },
          "422" : {
            "description" : "One or more policies is invalid and could not be created",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/policies/{id}" : {
      "get" : {
        "tags" : [ "policies" ],
        "summary" : "Retrieve a policy by its identifier",
        "description" : "",
        "operationId" : "getPolicy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the policy",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Policies"
            }
          },
          "404" : {
            "description" : "Policy not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "policies" ],
        "summary" : "Delete a policy by its identifier",
        "description" : "",
        "operationId" : "deleteAuthorization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the policy",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "404" : {
            "description" : "Policy not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/policies/{id}/asset" : {
      "get" : {
        "tags" : [ "policies" ],
        "summary" : "Retrieve the assets attached to a policy by the policy's identifier",
        "description" : "",
        "operationId" : "getPolicyAsset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the policy",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Assets"
            }
          },
          "404" : {
            "description" : "Policy not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/policies/{id}/authorizations" : {
      "get" : {
        "tags" : [ "policies" ],
        "summary" : "Retrieve the authorizations attached to a policy by the policy's identifier",
        "description" : "",
        "operationId" : "getPolicyAuthorizations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the policy",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Authorizations"
            }
          },
          "404" : {
            "description" : "Policy not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/policies/{id}/geozone" : {
      "get" : {
        "tags" : [ "policies" ],
        "summary" : "Retrieve the geozone attached to a policy by the policy's identifier",
        "description" : "",
        "operationId" : "getPolicyGeozone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier for the policy",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Geozones"
            }
          },
          "404" : {
            "description" : "Policy not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve all users the authenticated entity can view",
        "description" : "",
        "operationId" : "getUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter[org]",
          "in" : "query",
          "description" : "Identifiers for organizations which will have their users represented in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "filter[email]",
          "in" : "query",
          "description" : "Emails for users which will be represented in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Users"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Create new users",
        "description" : "",
        "operationId" : "createUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The user or users which will be created",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Users"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Users"
            }
          },
          "400" : {
            "description" : "Invalid request",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          },
          "403" : {
            "description" : "Forbidden from creating users",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          },
          "422" : {
            "description" : "Invalid users",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/users/{id}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve an individual user given the user's unique ID",
        "description" : "",
        "operationId" : "getUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The user's unique identifier",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Users"
            }
          },
          "404" : {
            "description" : "User not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    },
    "/users/{id}/org" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve a user's organization given the user's unique ID",
        "description" : "",
        "operationId" : "getUserOrg",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The user's unique identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Orgs"
            }
          },
          "404" : {
            "description" : "User not found",
            "schema" : {
              "$ref" : "#/definitions/Errors"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "Activation" : {
      "type" : "object",
      "required" : [ "created", "generated", "name", "value" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Sensor or sensor group which triggered the activation"
        },
        "value" : {
          "type" : "number",
          "format" : "double",
          "description" : "Abnormal value for the activation"
        },
        "generated" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the activation was observed"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the Nuve platform received the activation"
        }
      },
      "description" : "Attributes for the activation"
    },
    "ActivationData" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "unique identifier",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "description" : "object type",
          "readOnly" : true
        },
        "attributes" : {
          "$ref" : "#/definitions/Activation"
        },
        "relationships" : {
          "$ref" : "#/definitions/ActivationRelationships"
        }
      },
      "description" : "When an event shows the metric for a sensor outside of its normal range an activation is created"
    },
    "ActivationRelationships" : {
      "type" : "object",
      "required" : [ "analyses", "event" ],
      "properties" : {
        "event" : {
          "description" : "Returns the event which triggered this activation",
          "$ref" : "#/definitions/OneRelationship"
        },
        "analyses" : {
          "description" : "Return the analyses which reference this activation",
          "$ref" : "#/definitions/ManyRelationship"
        }
      },
      "description" : "Relationships for the activation"
    },
    "Activations" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ActivationData"
          }
        }
      },
      "description" : "A collection of activations"
    },
    "Address" : {
      "type" : "object",
      "properties" : {
        "address" : {
          "type" : "array",
          "description" : "Address lines for street and PO Box",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "The name for the person or company at hte address"
        },
        "locality" : {
          "type" : "string",
          "description" : "Locality or city for the address"
        },
        "administrativeArea" : {
          "type" : "string",
          "description" : "The country or province that the address is located in"
        },
        "postalCode" : {
          "type" : "string",
          "description" : "The code used by the post office to deliver to the address"
        },
        "postalCountry" : {
          "type" : "string",
          "description" : "The country code used by the post office to deliver to the address"
        }
      },
      "description" : "The address for a place"
    },
    "Analyses" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AnalysisData"
          }
        }
      },
      "description" : "A collection of analyses data"
    },
    "Analysis" : {
      "type" : "object",
      "required" : [ "category", "start", "status" ],
      "properties" : {
        "status" : {
          "type" : "string",
          "description" : "Whether or not the analysis has been completed yet",
          "enum" : [ "open", "closed" ]
        },
        "end" : {
          "description" : "Date, time, location, speed and heading of the asset at the end point of the analysis, if the analysis has been closed",
          "$ref" : "#/definitions/Checkpoint"
        },
        "category" : {
          "type" : "string",
          "description" : "Short string to used to collate analyses into a category",
          "enum" : [ "fuel_refill" ]
        },
        "start" : {
          "description" : "Date, time, location, speed and heading of the asset at the starting point of the analysis",
          "$ref" : "#/definitions/Checkpoint"
        },
        "summary" : {
          "type" : "array",
          "description" : "Human-readable titles and descriptions for an analysis",
          "items" : {
            "$ref" : "#/definitions/Summary"
          }
        },
        "modified" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the resource was last modified",
          "readOnly" : true
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the resource was originally created",
          "readOnly" : true
        }
      },
      "description" : "Attributes for the analysis"
    },
    "AnalysisData" : {
      "type" : "object",
      "required" : [ "attributes", "relationships" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "unique identifier",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "description" : "object type",
          "readOnly" : true
        },
        "attributes" : {
          "description" : "Attributes for the analysis",
          "$ref" : "#/definitions/Analysis"
        },
        "relationships" : {
          "description" : "Relationships for the analysis",
          "$ref" : "#/definitions/AnalysisRelationships"
        }
      },
      "description" : "An analysis of a collection of event data related to a particular asset"
    },
    "AnalysisRelationships" : {
      "type" : "object",
      "required" : [ "activations", "asset" ],
      "properties" : {
        "activations" : {
          "description" : "The activations which contribute to this analysis",
          "$ref" : "#/definitions/ManyRelationship"
        },
        "asset" : {
          "description" : "The asset that triggered the analysis",
          "$ref" : "#/definitions/OneRelationship"
        }
      },
      "description" : "Relationships for the analysis"
    },
    "Asset" : {
      "type" : "object",
      "required" : [ "classification", "name" ],
      "properties" : {
        "classification" : {
          "type" : "string",
          "description" : "Classification of the asset, what type of asset it is",
          "enum" : [ "tractor", "trailer", "truck" ]
        },
        "name" : {
          "type" : "string",
          "description" : "A short, user-friendly name which will be used to display the resource to the end user"
        },
        "description" : {
          "type" : "string",
          "description" : "A user-friendly description of the resource"
        },
        "slug" : {
          "type" : "string",
          "description" : "A short sting which can be used in URLs, in place of the ID to represent the resource"
        },
        "modified" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the resource was last modified",
          "readOnly" : true
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the resource was originally created",
          "readOnly" : true
        },
        "tags" : {
          "type" : "array",
          "description" : "List of tags associated with this resource",
          "items" : {
            "type" : "string"
          }
        },
        "permissions" : {
          "type" : "array",
          "description" : "Permissions which are effective for this resource",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Attributes for an asset"
    },
    "AssetContainer" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/AssetData"
        }
      },
      "description" : "A single asset data container"
    },
    "AssetData" : {
      "type" : "object",
      "required" : [ "attributes" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "object type",
          "readOnly" : true
        },
        "attributes" : {
          "description" : "Attributes for the asset",
          "$ref" : "#/definitions/Asset"
        },
        "relationships" : {
          "description" : "Relationships for the asset",
          "readOnly" : true,
          "$ref" : "#/definitions/AssetRelationships"
        },
        "id" : {
          "type" : "string",
          "description" : "unique identifier",
          "readOnly" : true
        }
      },
      "description" : "ID, type and relationships for an asset"
    },
    "AssetRelationships" : {
      "type" : "object",
      "properties" : {
        "org" : {
          "description" : "The organization which contains the geozone",
          "readOnly" : true,
          "$ref" : "#/definitions/OneRelationship"
        },
        "authorizations" : {
          "description" : "Authorizations which have been configured on this asset",
          "readOnly" : true,
          "$ref" : "#/definitions/ManyRelationship"
        }
      },
      "description" : "Relationships for an asset"
    },
    "Assets" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AssetData"
          }
        }
      },
      "description" : "A collection of asset data"
    },
    "Authorization" : {
      "type" : "object",
      "required" : [ "permission" ],
      "properties" : {
        "permission" : {
          "type" : "string",
          "description" : "Permission, for example fuel or cargo, related to the access which this authorization provides",
          "enum" : [ "fuel", "cargo" ]
        },
        "access" : {
          "type" : "string",
          "description" : "Whether or not the permission should be granted or revoked based upon the hierarchy",
          "enum" : [ "granted", "revoked" ]
        },
        "expiration" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date and time at which this authorization will expire and no longer be valid"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the authorization was originally created",
          "readOnly" : true
        }
      },
      "description" : "Attributes for an authorization"
    },
    "AuthorizationData" : {
      "type" : "object",
      "required" : [ "attributes", "relationships" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "unique identifier",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "description" : "object type",
          "readOnly" : true
        },
        "attributes" : {
          "description" : "Attributes for the authorization",
          "$ref" : "#/definitions/Authorization"
        },
        "relationships" : {
          "description" : "Attributes for the authorization",
          "$ref" : "#/definitions/AuthorizationRelationships"
        }
      },
      "description" : "ID, type and relationships for an authorization. Authorizations are the bridge between policieson geozones and assets. When an asset enters a geozone, any policies configured on that geozone come intoeffect in order to grant permissions. Alternatively, authorizations can be granted directly on assets, whichare not associated with either geozones or policies and which will override other authorizations"
    },
    "AuthorizationRelationships" : {
      "type" : "object",
      "properties" : {
        "policy" : {
          "description" : "Policy which this authorization is attached to. When the policy goes into effect, for instance if an asset enters a geozone, this authorization will be used to grant or revoke access",
          "readOnly" : true,
          "$ref" : "#/definitions/OneRelationship"
        },
        "asset" : {
          "description" : "Asset which this authorization is attached to. When determining when the current authorizationfor an asset is, this authorization will be taken into consideration",
          "$ref" : "#/definitions/OneRelationship"
        }
      },
      "description" : "Relationships for an authorization"
    },
    "Authorizations" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AuthorizationData"
          }
        }
      }
    },
    "Cellular" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "description" : "Status of the cellular connection, roaming or not roaming"
        },
        "signal" : {
          "type" : "number",
          "format" : "double",
          "description" : "The cellular signal strength in Decibel-milliwatts"
        },
        "carrier" : {
          "type" : "string",
          "description" : "Carrier of the cellular data"
        }
      }
    },
    "Checkpoint" : {
      "type" : "object",
      "required" : [ "coordinates", "date" ],
      "properties" : {
        "heading" : {
          "type" : "number",
          "format" : "double",
          "description" : "Heading of the asset, represented as degrees from true north"
        },
        "coordinates" : {
          "type" : "array",
          "description" : "Coordinates of the location for the asset, provided as a point in GeoJSON format",
          "items" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "speed" : {
          "type" : "number",
          "format" : "double",
          "description" : "Speed of the asset, represented as kilometers per hour (KPH)"
        },
        "date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time of the analysis checkpoint"
        }
      }
    },
    "Error" : {
      "type" : "object",
      "properties" : {
        "source" : {
          "description" : "Source of the error",
          "readOnly" : true,
          "$ref" : "#/definitions/Source"
        },
        "title" : {
          "type" : "string"
        }
      }
    },
    "Errors" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        }
      }
    },
    "Geozone" : {
      "type" : "object",
      "required" : [ "coordinates", "name" ],
      "properties" : {
        "coordinates" : {
          "type" : "array",
          "description" : "Coordinates for this geozone provided as a polygon in GeoJSON format",
          "items" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "modified" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the resource was last modified",
          "readOnly" : true
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the resource was originally created",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "A short, user-friendly name which will be used to display the resource to the end user"
        },
        "description" : {
          "type" : "string",
          "description" : "A user-friendly description of the resource"
        },
        "slug" : {
          "type" : "string",
          "description" : "A short sting which can be used in URLs, in place of the ID to represent the resource"
        },
        "tags" : {
          "type" : "array",
          "description" : "List of tags associated with this resource",
          "items" : {
            "type" : "string"
          }
        },
        "permissions" : {
          "type" : "array",
          "description" : "Permissions which are effective for this resource",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Attributes for a geozone"
    },
    "GeozoneData" : {
      "type" : "object",
      "required" : [ "attributes" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "unique identifier",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "description" : "object type",
          "readOnly" : true
        },
        "attributes" : {
          "description" : "Attributes for the geozone",
          "$ref" : "#/definitions/Geozone"
        },
        "relationships" : {
          "description" : "Relationships for the geozone",
          "readOnly" : true,
          "$ref" : "#/definitions/GeozoneRelationships"
        }
      },
      "description" : "Area in which different authorizations can be provided for assets"
    },
    "GeozoneRelationships" : {
      "type" : "object",
      "properties" : {
        "org" : {
          "description" : "The organization which contains the geozone",
          "$ref" : "#/definitions/OneRelationship"
        },
        "policies" : {
          "description" : "Policies which have been configured on this geozone",
          "readOnly" : true,
          "$ref" : "#/definitions/ManyRelationship"
        }
      },
      "description" : "Relationships for a geozone"
    },
    "Geozones" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GeozoneData"
          }
        }
      }
    },
    "Gps" : {
      "type" : "object",
      "required" : [ "fixTime" ],
      "properties" : {
        "hdop" : {
          "type" : "number",
          "format" : "double",
          "description" : "The GPS horizontal dilution of precision"
        },
        "fixTime" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date and time at which the GPS fix was acquired"
        },
        "satellites" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of satellites used to acquire a GPS fix."
        }
      }
    },
    "Location" : {
      "type" : "object",
      "required" : [ "coordinates" ],
      "properties" : {
        "heading" : {
          "type" : "number",
          "format" : "double",
          "description" : "Heading of the asset, represented as degrees from true north"
        },
        "coordinates" : {
          "type" : "array",
          "description" : "Coordinates of the location for the asset, provided as a point in GeoJSON format",
          "items" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "speed" : {
          "type" : "number",
          "format" : "double",
          "description" : "Speed of the asset, represented as kilometers per hour (KPH)"
        }
      }
    },
    "LocationEvent" : {
      "type" : "object",
      "required" : [ "generated", "location" ],
      "properties" : {
        "location" : {
          "description" : "Location, speed and heading of the asset at the time of this event",
          "$ref" : "#/definitions/Location"
        },
        "generated" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time at which this event was observed or generated"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the Nuve API received the event",
          "readOnly" : true
        },
        "gps" : {
          "description" : "When originating from a GPS device, contains information about the GPS lock",
          "$ref" : "#/definitions/Gps"
        },
        "cellular" : {
          "description" : "When originating from a device with a cellular modem, contains information about the cellular connection",
          "$ref" : "#/definitions/Cellular"
        },
        "metrics" : {
          "type" : "object",
          "description" : "Key/value metrics for an event",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        }
      }
    },
    "LocationEventData" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "object type",
          "readOnly" : true
        },
        "id" : {
          "type" : "string",
          "description" : "unique identifier",
          "readOnly" : true
        },
        "attributes" : {
          "$ref" : "#/definitions/LocationEvent"
        },
        "relationships" : {
          "$ref" : "#/definitions/LocationEventRelationships"
        }
      }
    },
    "LocationEventRelationships" : {
      "type" : "object",
      "required" : [ "asset" ],
      "properties" : {
        "operator" : {
          "description" : "The operator, in the case of a truck, the driver, for this asset",
          "$ref" : "#/definitions/OneRelationship"
        },
        "asset" : {
          "description" : "The asset which generated this event",
          "$ref" : "#/definitions/OneRelationship"
        }
      }
    },
    "LocationEvents" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LocationEventData"
          }
        }
      },
      "description" : "A collection of location event data"
    },
    "ManyRelationship" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/ResourceData"
          }
        },
        "links" : {
          "description" : "Links for this relationship",
          "$ref" : "#/definitions/RelationshipLinks"
        },
        "meta" : {
          "description" : "Metadata for the relationship",
          "$ref" : "#/definitions/RelationshipMetadata"
        }
      },
      "description" : "Represents a relationship between one entity to one to many other entities."
    },
    "OneRelationship" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "description" : "Resource for the relationship",
          "$ref" : "#/definitions/ResourceData"
        },
        "links" : {
          "description" : "Links for this relationship",
          "$ref" : "#/definitions/RelationshipLinks"
        },
        "meta" : {
          "description" : "Metadata for the relationship",
          "$ref" : "#/definitions/RelationshipMetadata"
        }
      },
      "description" : "Represents a relationship between two different entities."
    },
    "Org" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "address" : {
          "description" : "Billing address for the organization",
          "$ref" : "#/definitions/Address"
        },
        "modified" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the resource was last modified",
          "readOnly" : true
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the resource was originally created",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "A short, user-friendly name which will be used to display the resource to the end user"
        },
        "description" : {
          "type" : "string",
          "description" : "A user-friendly description of the resource"
        },
        "slug" : {
          "type" : "string",
          "description" : "A short sting which can be used in URLs, in place of the ID to represent the resource"
        },
        "email" : {
          "type" : "string",
          "description" : "Email address for the billing contact"
        },
        "phone" : {
          "type" : "string",
          "description" : "Phone number for the billing contact"
        }
      },
      "description" : "Attributes for an organization"
    },
    "OrgContainer" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/OrgData"
        }
      },
      "description" : "An individual org"
    },
    "OrgData" : {
      "type" : "object",
      "required" : [ "attributes" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "unique identifier",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "description" : "object type",
          "readOnly" : true
        },
        "attributes" : {
          "description" : "Attributes for the org",
          "$ref" : "#/definitions/Org"
        },
        "relationships" : {
          "description" : "Relationships for the organization",
          "readOnly" : true,
          "$ref" : "#/definitions/OrgRelationships"
        },
        "links" : {
          "description" : "Link to retrieve the organization",
          "readOnly" : true,
          "$ref" : "#/definitions/SelfLink"
        }
      },
      "description" : "An organization which contains assets, geozones, and users"
    },
    "OrgRelationships" : {
      "type" : "object",
      "properties" : {
        "parent" : {
          "description" : "When available, the parent of the organization",
          "$ref" : "#/definitions/OneRelationship"
        },
        "children" : {
          "description" : "Children of the organization. Child organizations can be managed by the parent organization",
          "readOnly" : true,
          "$ref" : "#/definitions/ManyRelationship"
        },
        "geozones" : {
          "description" : "Geozones of the organization. Organization geozones can be managed by the organization",
          "readOnly" : true,
          "$ref" : "#/definitions/ManyRelationship"
        },
        "users" : {
          "description" : "Users of the organization. Organization users can be managed by the organization",
          "readOnly" : true,
          "$ref" : "#/definitions/ManyRelationship"
        },
        "assets" : {
          "description" : "Assets of the organization. Organization assets can be managed by the organization",
          "readOnly" : true,
          "$ref" : "#/definitions/ManyRelationship"
        }
      },
      "description" : "Relationships for an organization"
    },
    "Orgs" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrgData"
          }
        }
      }
    },
    "Policies" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PolicyData"
          }
        }
      },
      "description" : "A collection of policies"
    },
    "Policy" : {
      "type" : "object",
      "required" : [ "permission" ],
      "properties" : {
        "permission" : {
          "type" : "string",
          "description" : "Permission, for example fuel or cargo, related to the access which this authorization provides",
          "enum" : [ "fuel", "cargo" ]
        },
        "mode" : {
          "type" : "string",
          "description" : "one_time move denotes that this policy will go into effect exactly one time for the asset which it is attached to after which the policy is considered fulfilled and will no longercreate authorizations",
          "enum" : [ "one_time", "unlimited" ]
        },
        "expiration" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Expiration date and time of this policy. At which time all existing authorizations relatedto this policy will be canceled"
        },
        "duration" : {
          "type" : "string",
          "description" : "Duration of time that the authorizations created by this policy are effective"
        }
      },
      "description" : "Attributes for a policy"
    },
    "PolicyData" : {
      "type" : "object",
      "required" : [ "attributes" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "unique identifier",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "description" : "object type",
          "readOnly" : true
        },
        "attributes" : {
          "description" : "Attributes for the policy",
          "$ref" : "#/definitions/Policy"
        },
        "relationships" : {
          "description" : "Relationships for the policy",
          "$ref" : "#/definitions/PolicyRelationships"
        }
      },
      "description" : "ID, type and relationships for a policy"
    },
    "PolicyRelationships" : {
      "type" : "object",
      "required" : [ "asset" ],
      "properties" : {
        "geozone" : {
          "description" : "The geozone to which the policy is attached",
          "$ref" : "#/definitions/OneRelationship"
        },
        "authorizations" : {
          "description" : "Authorizations which have been put into effect by this policy. When an asset enters a geozonea corresponding authorization is created. When it leaves the geozone, it is removed",
          "readOnly" : true,
          "$ref" : "#/definitions/ManyRelationship"
        },
        "asset" : {
          "description" : "When set, defines the asset which this policy affects",
          "$ref" : "#/definitions/OneRelationship"
        }
      },
      "description" : "Relationships for a policy"
    },
    "RelationshipLinks" : {
      "type" : "object",
      "properties" : {
        "related" : {
          "type" : "string",
          "description" : "Related link for the relationship"
        },
        "self" : {
          "type" : "string",
          "description" : "Self link for the relationship"
        }
      },
      "description" : "Links for a relationship."
    },
    "RelationshipMetadata" : {
      "type" : "object"
    },
    "ResourceData" : {
      "type" : "object",
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "unique identifier",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "description" : "object type",
          "readOnly" : true
        }
      }
    },
    "SelfLink" : {
      "type" : "object",
      "properties" : {
        "self" : {
          "type" : "string"
        }
      }
    },
    "Source" : {
      "type" : "object",
      "properties" : {
        "pointer" : {
          "type" : "string",
          "description" : "a JSON Pointer [RFC6901] to the associated entity in the request document"
        }
      },
      "description" : "The source of the error"
    },
    "Summary" : {
      "type" : "object",
      "required" : [ "description", "language", "title" ],
      "properties" : {
        "language" : {
          "type" : "string",
          "description" : "Language code for the language of the title and description"
        },
        "description" : {
          "type" : "string",
          "description" : "A longer description, generally meant to provide the who, what and where for the analysis"
        },
        "title" : {
          "type" : "string",
          "description" : "A short title for the analysis"
        }
      },
      "description" : "A human-readable title and description for an analysis"
    },
    "User" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The user's name",
          "minLength" : 0,
          "maxLength" : 255
        },
        "email" : {
          "type" : "string",
          "description" : "The user's email address",
          "minLength" : 6,
          "maxLength" : 255
        },
        "phone" : {
          "type" : "string",
          "description" : "The user's phone number"
        },
        "modified" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the resource was last modified",
          "readOnly" : true
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time when the resource was originally created",
          "readOnly" : true
        }
      },
      "description" : "Attributes for a user"
    },
    "UserData" : {
      "type" : "object",
      "required" : [ "attributes" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "unique identifier",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "description" : "object type",
          "readOnly" : true
        },
        "attributes" : {
          "description" : "Attributes for the user",
          "$ref" : "#/definitions/User"
        },
        "relationships" : {
          "description" : "Relationships, including the org the user belongs to, for the user",
          "readOnly" : true,
          "$ref" : "#/definitions/UserRelationships"
        },
        "links" : {
          "description" : "Link to retrieve the user",
          "readOnly" : true,
          "$ref" : "#/definitions/SelfLink"
        }
      },
      "description" : "A user which belongs to an organization"
    },
    "UserRelationships" : {
      "type" : "object",
      "properties" : {
        "org" : {
          "description" : "The organization that manages the user",
          "$ref" : "#/definitions/OneRelationship"
        }
      },
      "description" : "Relationships for a user"
    },
    "Users" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserData"
          }
        }
      }
    }
  }
}